# -*- coding: utf-8 -*-
"""Masking Clustering K means

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I8lPGLhPYNgApl8SdO0lyalZrIhq0UW-

#**MASKING CLUSTERING MENGGUNAKAN KMEANS**

1. Bagaimana menentukan cluster client yang perlu diberi peringatan untuk memaksimalkan penggunaan greenticknya?
2. Bagaimana menentukan prioritas client yang harus diberi peringatan lebih dahulu?

##Import library dan dataset
Import library yang dibutuhkan serta import dataset dari folder penyimpanan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

"""##Data Loading
Data didapatkan dari perusahaan dan diubah ke dalam bentuk dataframe

Kolom atau variabel yang ada pada dataset:

* Masking : merupakan nama customer
* Total : merupakan total jumlah pesan yang dikirim oleh masking
* Rentang Greentick Ke Juni 2023 : rentang waktu per bulan greentick masking dari awal mulai mendapatkan greentick sampai dengan bulan Juni 2023
* Rata-rata : merupakan rata-rata pesan yang dikirim dalam sebulan sesuai dengan rentang greentick
"""

# Import dataset
data = pd.read_csv('/content/drive/MyDrive/Dataset_AI/Data Intern/Data Clustering.csv',sep=",")
data

"""Output kode diatas memberikan informasi sebagai berikut:

Terdapat 119 baris dalam dataset
Ada 4 Kolom yaitu: Masking, Total, Rentang Greentick Ke Juni 2023, Rata-rata

## Exploratory Data Analysis

Melakukan beberapa tahapan sebagai berikut :

* Deskripsi Variabel
* Menangani missing value dan outliers
"""

# Cek info dataset
data.info()

"""Dari output dapat dilihat bahwa:

* Ada 1 kolom bertipe object, yaitu Masking
* Terdapat 3 kolom dengan tipe data int64, yaitu Total, Rentang Greentick Ke Juni 2023, Rata-rata
"""

# Cek deskripsi data
data.describe()

"""### Menangani Missing Value

Melakukan pengecekan terlebih dahulu apakah didalam dataset terdapat missing value dengan kode berikut :
"""

#cek missing value
data.isnull().sum()

"""Dapat dilihat bahwa didalam data tidak terdapat missing value

### Menangani Outliers

outliers adalah sampel yang nilainya sangat jauh dari cakupan umum data utama. Pada kasus ini, outliers akan dideteksi dengan teknik visualisasi data (boxplot). Kemudian, ouliers akan ditangani dengan teknik IQR method
"""

# Visualisasi boxplot
import seaborn as sns
sns.boxplot(data)

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR=Q3-Q1
outliers_data=data[((data<(Q1-1.5*IQR))|(data>(Q3+1.5*IQR))).any(axis=1)]
clean_data=data[~((data<(Q1-1.5*IQR))|(data>(Q3+1.5*IQR))).any(axis=1)]

# Cek ukuran dataset setelah kita drop outliers
clean_data.shape

"""## Model Development
Model development adalah tahapan di mana kita menggunakan algoritma machine learning. Pada tahap ini, kita akan mengembangkan model machine learning dengan algoritma clustering yaitu Kmeans.
"""

#scalling data
fitur = ["Total","Rentang Greentick Ke Juni 2023","Rata-rata"]
X=clean_data[fitur]
from sklearn.preprocessing import MinMaxScaler
mmscaler = MinMaxScaler()

X = mmscaler.fit_transform(X)
X.shape

#Penentuan jumlah cluster menggunakan elbow
cluster = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X)
    cluster.append(kmeans.inertia_)
plt.plot(range(1, 11), cluster)
plt.title('Elbow Method')
plt.xlabel('Jumlah Clusters')
plt.ylabel('Inersia')
plt.show()

"""Dapat dilihat dari grafik diatas bahwa jumlah cluster yang kemungkinan cocok yaitu 3 cluster."""

# Melakukan clustering dengan jumlah cluster yang sudah ditentukan
kmeans = KMeans(n_clusters=3, init='k-means++', random_state=42)
y_kmeans = kmeans.fit_predict(X)

# Menghitung Silhoutte Score
score = silhouette_score(X, kmeans.labels_, metric='euclidean')

# Print the score
print('Silhouetter Score: %.3f' % score)

# Menambahkan kolom cluster pada dataset
clean_data['Cluster'] = y_kmeans

# Menampilkan hasil clustering
clean_data

# melihat jumlah data per cluster dari hasil clustering
clean_data["Cluster"].value_counts()

"""Dapat disimpulkan bahwa :
* Total untuk cluster 0 sebanyak 23 data
* Total untuk cluster 1 sebanyak 60 data
* Total untuk cluster 1 sebanyak 15 data
"""

clean_data[clean_data['Cluster'] == 0].describe()

clean_data[clean_data['Cluster'] == 1].describe()

clean_data[clean_data['Cluster'] == 2].describe()

sns.boxplot(x='Cluster', y='Rata-rata', data=clean_data)

"""Data diatas dapat dilihat bahwa :
* Total untuk cluster 0 memiliki rentang nilai greentick 16-41 dan rentang nilai rata-rata 0-9525 hal ini menandakan bahwa cluster 0 merupakan kategori **client lama**. Client lama merupakan client yang telah lama menggunakan greentick namun memiliki rata-rata yang tetap setiap bulannya.
* Total untuk cluster 1 memiliki rentang nilai greentick 0-15 dan rentang nilai rata-rata 0-12313 yang menandakan bahwa cluster 1 merupakan kategori **client warning**.  Client warning merupakan client yang dapat diberi peringatan untuk memaksimalkan penggunaan greentick untuk mengirim pesan lebih banyak.
* Total untuk cluster 2 memiliki rentang nilai greentick 4-38 dan rentang nilai rata-rata 82788-454770 hal ini menandakan bahwa cluster 2 merupakan kategori **client aman**. Client aman merupakan client yang telah memaksimalkan penggunaan greentick dengan mengirim pesan dalam jumlah yang banyak.

## Menentukan Prioritas Warning

Data yang digunakan merupakan data yang telah dicluster sebelumnya yaitu **data client warning**.
"""

war_data=clean_data[clean_data['Cluster'] == 1]
war_data

fitur = ["Total","Rentang Greentick Ke Juni 2023","Rata-rata"]
X=war_data[fitur]
from sklearn.preprocessing import MinMaxScaler
mmscaler = MinMaxScaler()

X = mmscaler.fit_transform(X)
X.shape

cluster = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X)
    cluster.append(kmeans.inertia_)
plt.plot(range(1, 11), cluster)
plt.title('Elbow Method')
plt.xlabel('Jumlah Clusters')
plt.ylabel('Inersia')
plt.show()

# Melakukan clustering dengan jumlah cluster yang sudah ditentukan
kmeans = KMeans(n_clusters=4, init='k-means++', random_state=42)
y_kmeans = kmeans.fit_predict(X)

# Calculate Silhoutte Score
score = silhouette_score(X, kmeans.labels_, metric='euclidean')

# Print the score
print('Silhouetter Score: %.3f' % score)
# Menambahkan kolom cluster pada dataset
war_data['Cluster'] = y_kmeans

# Menampilkan hasil clustering
war_data

war_data["Cluster"].value_counts()

sns.boxplot(x='Cluster', y='Rata-rata', data=war_data)

war_data[war_data['Cluster'] == 0]

war_data[war_data['Cluster'] == 1]

war_data[war_data['Cluster'] == 2]

war_data[war_data['Cluster'] == 3]